function raiseMathOpError(r,e){throw Error(`Invalid operation ${r}; cannot apply to non-number ${e}.`)}function raiseArrayOpError(r,e){throw Error(`Invalid operation ${r}; cannot apply to non-array ${e}.`)}function add(r,e,t,i){isNumber(r)||raiseMathOpError("+",r),deepSet(e,t,r+i)}function subtract(r,e,t,i){isNumber(r)||raiseMathOpError("-",r),deepSet(e,t,r-i)}function multiply(r,e,t,i){isNumber(r)||raiseMathOpError("*",r),deepSet(e,t,r*i)}function divide(r,e,t,i){isNumber(r)||raiseMathOpError("/",r),deepSet(e,t,r/i)}function mod(r,e,t,i){isNumber(r)||raiseMathOpError("%",r),deepSet(e,t,r%i)}function pow(r,e,t,i){isNumber(r)||raiseMathOpError("**",r),deepSet(e,t,r**i)}function increment(r,e,t){isNumber(r)||raiseMathOpError("++",r),deepSet(e,t,r+1)}function decrement(r,e,t){isNumber(r)||raiseMathOpError("--",r),deepSet(e,t,r-1)}let isNumber=require("lodash.isNumber"),deepUnset=require("lodash.unset"),deepSet=require("lodash.set"),deepGet=require("lodash.get"),arrayOp=(r,e,t,i)=>{Array.isArray(r)||raiseArrayOpError(t,r),r[t](i)},operations={delete(r,e,t,i){deepUnset(r,e,t)},set(r,e,t,i){deepSet(e,t,i)},add:add,subtract:subtract,multiply:multiply,divide:divide,mod:mod,pow:pow,increment:increment,decrement:decrement,"+":add,"-":subtract,"*":multiply,"/":divide,"%":mod,"**":pow,"++":increment,"--":decrement,push(r,e,t,i){arrayOp(r,e,"push",i)},pop(r,e,t,i){arrayOp(r,e,"pop",i)},shift(r,e,t,i){arrayOp(r,e,"shift",i)},unshift(r,e,t,i){arrayOp(r,e,"unshift",i)},splice(r,e,t,i){Array.isArray(r)||raiseArrayOpError("splice",r),r.splice(...i)},insert(r,e,t,i){Array.isArray(r)||raiseArrayOpError("insert",r),r.splice(i.index,0,i.value)},removeAt(r,e,t,i){Array.isArray(r)||raiseArrayOpError("removeAt",r),r.splice(i.index,1)},extend(r,e,t,i){Array.isArray(r)||raiseArrayOpError("extend",r),r.splice(r.length,0,...i)},fn(r,e,t,i){deepSet(e,t,i(r))}};exports.default=function({path:r,operation:e,operand:t},i){let a=deepGet(i,r);if(!operations[e])throw Error(`Unrecognized operation ${e}`);operations[e](a,i,r,t)};
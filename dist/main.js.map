{"version":3,"sources":["../src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["let isNumber = require(\"lodash.isNumber\");\nlet deepUnset = require(\"lodash.unset\");\nlet deepSet = require(\"lodash.set\");\nlet deepGet = require(\"lodash.get\");\n\nfunction raiseMathOpError(opType, original) {\n  throw Error(`Invalid operation ${opType}; cannot apply to non-number ${original}.`);\n}\n\nfunction raiseArrayOpError(opType, original) {\n  throw Error(`Invalid operation ${opType}; cannot apply to non-array ${original}.`);\n}\n\nlet arrayOp = (original, target, operation, operand) => {\n    if(!Array.isArray(original)) {\n      raiseArrayOpError(operation, original);\n    }\n    original[operation](operand);\n};\n\nfunction add(original, target, path, operand) {\n    if (!isNumber(original)) {\n      raiseMathOpError('+', original);\n    }\n    deepSet(target, path, original + operand);\n}\n\nfunction subtract(original, target, path, operand) {\n  if (!isNumber(original)) {\n    raiseMathOpError('-', original);\n  }\n  deepSet(target, path, original - operand);\n}\n\nfunction multiply(original, target, path, operand) {\n  if (!isNumber(original)) {\n    raiseMathOpError('*', original);\n  }\n  deepSet(target, path, original * operand);\n}\n\nfunction divide(original, target, path, operand) {\n  if (!isNumber(original)) {\n    raiseMathOpError('/', original);\n  }\n  deepSet(target, path, original / operand);\n}\n\nfunction mod(original, target, path, operand) {\n  if (!isNumber(original)) {\n    raiseMathOpError('%', original);\n  }\n  deepSet(target, path, original % operand);\n}\n\nfunction pow(original, target, path, operand) {\n  if (!isNumber(original)) {\n    raiseMathOpError('**', original);\n  }\n  deepSet(target, path, original ** operand);\n}\n\nfunction increment(original, target, path) {\n  if (!isNumber(original)) {\n    raiseMathOpError('++', original);\n  }\n  deepSet(target, path, original + 1);\n}\n\nfunction decrement(original, target, path) {\n  if (!isNumber(original)) {\n    raiseMathOpError('--', original);\n  }\n  deepSet(target, path, original -1);\n}\n\nlet operations = {\n  delete(original, target, path, operand) {deepUnset(original, target, path);},\n  set(original, target, path, operand) {deepSet(target, path, operand);},\n  add,\n  subtract,\n  multiply,\n  divide,\n  mod,\n  pow,\n  increment,\n  decrement,\n  '+': add,\n  '-': subtract,\n  '*': multiply,\n  '/': divide,\n  '%': mod,\n  '**': pow,\n  '++': increment,\n  '--': decrement,\n  push(original, target, path, operand) {arrayOp(original, target, 'push', operand)},\n  pop(original, target, path, operand) {arrayOp(original, target, 'pop', operand)},\n  shift(original, target, path, operand) {arrayOp(original, target, 'shift', operand)},\n  unshift(original, target, path, operand) {arrayOp(original, target, 'unshift', operand)},\n  splice(original, target, path, operand) {\n    if(!Array.isArray(original)) {\n      raiseArrayOpError('splice', original);\n    }\n    original.splice(...operand);\n  },\n  insert(original, target, path, operand) {\n    if (!Array.isArray(original)) {\n      raiseArrayOpError('insert', original);\n    }\n    original.splice(operand.index, 0, operand.value);\n  },\n  removeAt(original, target, path, operand) {\n    if (!Array.isArray(original)) {\n      raiseArrayOpError('removeAt', original);\n    }\n    original.splice(operand.index, 1);\n  },\n  extend(original, target, path, operand) {\n    if (!Array.isArray(original)) {\n      raiseArrayOpError('extend', original);\n    }\n    original.splice(original.length, 0, ...operand);\n  },\n  fn(original, target, path, operand) {\n    deepSet(target, path, operand(original));\n  }\n};\n\nexport default function (target, {path, operation, operand}) {\n  let original = deepGet(target, path);\n  if(operations[operation]) {\n    operations[operation](original, target, path, operand)\n  }\n  else {\n    throw Error(`Unrecognized operation ${operation}`);\n  }\n  return original;\n};"]}